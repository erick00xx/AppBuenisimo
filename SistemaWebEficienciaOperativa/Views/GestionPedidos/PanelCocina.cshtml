@model List<SistemaWebEficienciaOperativa.Models.ViewModels.PedidoCompletoViewModel>
@{
    ViewBag.Title = "Panel de Cocina / Barra";
    var listaTodosLosEstados = ViewBag.ListaTodosLosEstadosPedido as List<SistemaWebEficienciaOperativa.Models.tbEstadosPedidos> ?? new List<SistemaWebEficienciaOperativa.Models.tbEstadosPedidos>();
}

<h2>@ViewBag.Title</h2>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
    </div>
}

<div class="row">
    @if (Model != null && Model.Any())
    {
        foreach (var pedido in Model.OrderBy(p => p.FechaPedido)) // Orden por antigüedad
        {
            string cardBorderClass = "border-secondary";
            if (pedido.EstadoPedido == "En espera") { cardBorderClass = "border-warning"; }
            else if (pedido.EstadoPedido == "En preparación") { cardBorderClass = "border-primary"; }

            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card h-100 @cardBorderClass" style="border-width: 3px;">
                    <div class="card-header bg-light">
                        <strong class="h5">Pedido N° @pedido.IdPedido</strong> - Mesa: @pedido.NumeroMesa
                        <small class="float-right text-muted">@pedido.FechaPedido.ToString("HH:mm") hs</small>
                    </div>
                    <div class="card-body" style="min-height: 150px; max-height:250px; overflow-y:auto;">
                        <h6 class="card-subtitle mb-2">Estado actual: <span class="font-weight-bold">@pedido.EstadoPedido</span></h6>
                        <ul class="list-unstyled">
                            @foreach (var item in pedido.Items)
                            {
                                <li>
                                    <span class="badge text-bg-danger mr-1">@item.Cantidad x</span>
                                    @item.NombreProducto @(!string.IsNullOrEmpty(item.Medida) ? $"({item.Medida})" : "")
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="card-footer bg-light">
                        @using (Html.BeginForm("CambiarEstadoPedidoPanel", "GestionPedidos", FormMethod.Post, new { @class = "form-inline" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden("idPedido", pedido.IdPedido)
                            <div class="form-group mb-0 mr-2 flex-grow-1">
                                <label for="idNuevoEstado_@pedido.IdPedido" class="sr-only">Nuevo Estado</label>
                                <select name="idNuevoEstado" id="idNuevoEstado_@pedido.IdPedido" class="form-control form-control-sm w-100">
                                    @foreach (var estado in listaTodosLosEstados.OrderBy(e => e.idEstadoPedido))
                                    {
                                        // Mostrar solo estados relevantes para cocina/barra
                                        // Y no permitir volver a un estado anterior de forma ilógica (ej. de Listo a En Espera)
                                        bool selected = pedido.IdEstadoPedido == estado.idEstadoPedido;
                                        bool disabled = false;
                                        if (pedido.EstadoPedido == "En preparación" && estado.estado == "En espera") { disabled = true; }
                                        if (pedido.EstadoPedido == "Listo para entregar" && (estado.estado == "En espera" || estado.estado == "En preparación")) { disabled = true; }

                                        if (estado.estado == "En espera" || estado.estado == "En preparación" || estado.estado == "Listo para entregar" || estado.estado == "Entregado") // Incluir Entregado para marcarlo desde aquí si es necesario
                                        {
                                            <option value="@estado.idEstadoPedido" @(selected ? "selected" : "") @(disabled ? "disabled" : "")>
                                                @estado.estado
                                            </option>
                                        }
                                    }
                                </select>
                            </div>
                            <button type="submit" class="btn btn-sm btn-success">Cambiar</button>
                        }
                        <div class="mt-2">
                            @Html.ActionLink("Ver/Editar Detalles", "VerOEditarPedido", new { idPedido = pedido.IdPedido }, new { @class = "btn btn-sm btn-outline-info btn-block" })
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="alert alert-info text-center">No hay pedidos pendientes en este momento.</div>
        </div>
    }
</div>

    <script type="text/javascript">
        // Opcional: Recargar la página cada X segundos para ver nuevos pedidos
        // var refreshInterval = 60000; // 60 segundos
        // setTimeout(function(){
        //    if (!document.hidden) { // No recargar si la pestaña no está activa
        //       window.location.reload(true); // true para forzar recarga del servidor
        //    }
        // }, refreshInterval);

        // $('.alert').alert(); // Para que el botón de cierre funcione si usas Bootstrap JS
    </script>

<style>
    .card-header strong {
        font-size: 1.1rem;
    }

    .w-100 {
        width: 100% !important;
    }

    .flex-grow-1 {
        flex-grow: 1 !important;
    }
</style>